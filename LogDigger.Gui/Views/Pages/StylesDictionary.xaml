<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
    xmlns:cc="clr-namespace:LogDigger.Gui.Views.Controls"
    xmlns:converters1="clr-namespace:LogDigger.Gui.Views.Converters"
    xmlns:behaviors="clr-namespace:LogDigger.Gui.Views.Behaviors"
    xmlns:pages="clr-namespace:LogDigger.Gui.Views.Pages">

    <Style TargetType="ListBox" x:Key="NoSelectionListBoxStyle">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignFlatRectToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="54" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        ClipToBounds="True">
                        <Border
                            x:Name="HoverEllipse"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="1"
                            CornerRadius="5" />
                        <Border
                            x:Name="CheckedEllipse"
                            Background="{TemplateBinding Background}"
                            CornerRadius="5"
                            RenderTransformOrigin="0.5, 0.5">
                            <Border.RenderTransform>
                                <ScaleTransform
                                    x:Name="CheckedEllipseScale"
                                    CenterX="0.5"
                                    CenterY="0.5"
                                    ScaleX="1.0"
                                    ScaleY="1.0" />
                            </Border.RenderTransform>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="(UIElement.Opacity)"
                                            To="0.23"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                                Storyboard.TargetName="CheckedEllipseScale"
                                                Storyboard.TargetProperty="ScaleX"
                                                Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1.0" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames
                                                Storyboard.TargetName="CheckedEllipseScale"
                                                Storyboard.TargetProperty="ScaleY"
                                                Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1.0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames
                                                Storyboard.TargetName="CheckedEllipseScale"
                                                Storyboard.TargetProperty="ScaleX"
                                                Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames
                                                Storyboard.TargetName="CheckedEllipseScale"
                                                Storyboard.TargetProperty="ScaleY"
                                                Duration="0:0:0.2">
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                                                <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckedEllipseScale"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="1.0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckedEllipseScale"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="1.0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckedEllipseScale"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckedEllipseScale"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="HoverEllipse" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                        </Trigger>
                        <!-- TODO
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="BorderBrush" TargetName="normal" Value="{Binding (Custom:ControlsHelper.FocusBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="DataGridLogStyle" BasedOn="{StaticResource {x:Type DataGrid}}" TargetType="{x:Type DataGrid}">
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CanUserSortColumns" Value="False" />
        <Setter Property="EnableRowVirtualization" Value="True" />
        <Setter Property="RowHeight" Value="65" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="RowStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="Background" Value="White" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridExLogStyle" BasedOn="{StaticResource DataGridLogStyle}" TargetType="{x:Type cc:DataGridEx}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItemsImpl, Converter={converters1:HasMultipleItemsConverter}}" Value="True">
                <Setter Property="ContextMenu" Value="{Binding RelativeSource={RelativeSource Self}, Path=MultiSelectionContextMenu}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LightGroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="Margin" Value="0 20 0 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border
                            Grid.Row="0"
                            Background="#FFF0F0F0"
                            BorderBrush="#FFE0E0E0"
                            BorderThickness="0">
                            <ContentPresenter
                                Margin="10 6"
                                ContentSource="Header"
                                RecognizesAccessKey="True"
                                TextBlock.Foreground="Gray" />
                        </Border>
                        <Border
                            Grid.Row="1"
                            BorderBrush="#FFE0E0E0"
                            BorderThickness="0">
                            <ContentPresenter Margin="10 6" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LogDataGridCellStyle" BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="{x:Type DataGridCell}">
        <Setter Property="Padding" Value="10" />
        <Setter Property="BorderThickness" Value="0 "  />
    </Style>

    <Style x:Key="OverlookCellStyle" BasedOn="{StaticResource {x:Type DataGridCell}}" TargetType="{x:Type DataGridCell}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Grid x:Name="xamlCellGrid" Background="Transparent" VerticalAlignment="Stretch">
                        <Grid Background="Transparent" VerticalAlignment="Stretch">
                            <Grid VerticalAlignment="Center">
                                <StackPanel>
                                    <ContentPresenter
                                        Margin="0 6 0 0"
                                        x:Name="xamlContent"
                                        Content="{TemplateBinding Content}"
                                        ContentSource="{x:Null}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                                </StackPanel>
                            </Grid>
                            <Grid.OpacityMask>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStop Offset="0.75" Color="Black"/>
                                        <GradientStop Offset="0.99" Color="Transparent"/>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Grid.OpacityMask>
                        </Grid>
                        <i:Interaction.Behaviors>
                            <behaviors:ShowAdornerOnMouseOverBehavior
                                MouseEvent="OnMouseOverAndCtrl"
                                pages:AdornerProperties.AdornerContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" AdornedElement="{x:Reference xamlContent}">
                                <behaviors:ShowAdornerOnMouseOverBehavior.Condition>
                                    <MultiBinding Converter="{converters1:GreaterThanMultiValueConverter Shift=6}"> <!-- value of the shift is the margin of xamlContent -->
                                        <Binding ElementName="xamlContent" Path="ActualHeight" />
                                        <Binding ElementName="xamlCellGrid" Path="ActualHeight" />
                                    </MultiBinding>
                                </behaviors:ShowAdornerOnMouseOverBehavior.Condition>
                                <behaviors:ShowAdornerOnMouseOverBehavior.AdornerTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <wpf:Card
                                                x:Name="xamlCard"
                                                wpf:ShadowAssist.Darken="{Binding RelativeSource={RelativeSource Self}, Path=(behaviors:ShowAdornerOnMouseOverBehavior.IsAdornerLocked)}"
                                                Width="{Binding RelativeSource={RelativeSource Self}, Path=(pages:AdornerProperties.AdornerContext).ActualWidth}"
                                                MinHeight="{Binding RelativeSource={RelativeSource Self}, Path=(pages:AdornerProperties.AdornerContext).ActualHeight}"
                                                MaxHeight="400">
                                                <cc:ScrollViewerEx Margin="0 0 1 0" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                                                    <cc:RefControl Margin="6 0 6 6" Child="{x:Reference xamlContent}" />
                                                </cc:ScrollViewerEx>
                                            </wpf:Card>
                                        </Grid>
                                    </DataTemplate>
                                </behaviors:ShowAdornerOnMouseOverBehavior.AdornerTemplate>
                            </behaviors:ShowAdornerOnMouseOverBehavior>
                        </i:Interaction.Behaviors>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="xamlCellGrid" Property="Background" Value="{StaticResource MaterialDesignSelection}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate TargetType="{x:Type wpf:Card}" x:Key="CardTemplate">
        <ControlTemplate.Resources>
            <converters:ShadowEdgeConverter x:Key="ShadowEdgeConverter" />
        </ControlTemplate.Resources>
        <Grid Margin="{TemplateBinding Margin}" Background="Transparent">
            <Grid.OpacityMask>
                <MultiBinding Converter="{StaticResource ShadowEdgeConverter}">
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ActualWidth"/>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ActualHeight"/>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(wpf:ShadowAssist.ShadowDepth)" />
                    <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(wpf:ShadowAssist.ShadowEdges)" />
                </MultiBinding>
            </Grid.OpacityMask>
            <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                <Border
                    x:Name="border"
                    Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}"
                    CornerRadius="{TemplateBinding UniformCornerRadius}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"
                            x:Name="PART_ClipBorder"
                            Clip="{TemplateBinding ContentClip}" />
                </Border>
            </AdornerDecorator>
            <ContentPresenter
                x:Name="ContentPresenter"
                Margin="{TemplateBinding Padding}"
                Clip="{TemplateBinding ContentClip}"
                Content="{TemplateBinding ContentControl.Content}"
                ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}">
            </ContentPresenter>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="wpf:ShadowAssist.Darken" Value="true">
                <Setter TargetName="border" Property="wpf:ShadowAssist.Darken" Value="True" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type wpf:Card}">
        <Setter Property="Template" Value="{StaticResource CardTemplate}" />
        <Setter Property="Background" Value="{DynamicResource MaterialDesignCardBackground}" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="wpf:ShadowAssist.ShadowDepth" Value="Depth2" />
        <Setter Property="Focusable" Value="False"/>
    </Style>

    <Style x:Key="NoPaddingListBox" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" Padding="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NoStackPanelColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontSize" Value="12" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:DataGridAssist.ColumnHeaderPadding)}" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignColumnHeader}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="GoToVisible">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="12" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="GoToHidden">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="12" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                            <Grid Background="Transparent">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <wpf:ListSortDirectionIndicator Width="0" Height="12" Grid.Row="0"
                                                                x:Name="SortDirectionIndicator"
                                                                ListSortDirection="{TemplateBinding SortDirection}"
                                                                />
                                <ContentPresenter Grid.Row="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}"/>
                            </Grid>
                        </Border>
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                        </Trigger>
                        <Trigger SourceName="SortDirectionIndicator" Property="IsNeutral" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource GoToVisible}" Name="GoToVisible" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="GoToVisible" />
                                <BeginStoryboard Storyboard="{StaticResource GoToHidden}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
